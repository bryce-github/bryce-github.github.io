(this.webpackJsonpwebsite=this.webpackJsonpwebsite||[]).push([[8],{67:function(e,t,a){},77:function(e,t,a){"use strict";var s,i=a(1),r=a(2),n=a(4),o=a.n(n),c=a(0),l=a.n(c),h=a(19),d=a(20),b=a(5),j=a(29),m=a(15),u=a(28),p=((s={})[m.b]="show",s[m.a]="show",s),g=l.a.forwardRef((function(e,t){var a=e.className,s=e.children,n=Object(r.a)(e,["className","children"]),h=Object(c.useCallback)((function(e){Object(u.a)(e),n.onEnter&&n.onEnter(e)}),[n]);return l.a.createElement(m.e,Object(i.a)({ref:t,addEndListener:j.a},n,{onEnter:h}),(function(e,t){return l.a.cloneElement(s,Object(i.a)({},t,{className:o()("fade",a,s.props.className,p[e])}))}))}));g.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1},g.displayName="Fade";var f=g,w=a(8),O=a.n(w),x={label:O.a.string.isRequired,onClick:O.a.func},y=l.a.forwardRef((function(e,t){var a=e.label,s=e.onClick,n=e.className,c=Object(r.a)(e,["label","onClick","className"]);return l.a.createElement("button",Object(i.a)({ref:t,type:"button",className:o()("close",n),onClick:s},c),l.a.createElement("span",{"aria-hidden":"true"},"\xd7"),l.a.createElement("span",{className:"sr-only"},a))}));y.displayName="CloseButton",y.propTypes=x,y.defaultProps={label:"Close"};var v=y,T=a(68),k=a(27),E=a(18),N=Object(T.a)("h4");N.displayName="DivStyledAsH4";var C=Object(k.a)("alert-heading",{Component:N}),A=Object(k.a)("alert-link",{Component:E.a}),L={show:!0,transition:f,closeLabel:"Close alert"},B=l.a.forwardRef((function(e,t){var a=Object(h.a)(e,{show:"onClose"}),s=a.bsPrefix,n=a.show,c=a.closeLabel,j=a.className,m=a.children,u=a.variant,p=a.onClose,g=a.dismissible,w=a.transition,O=Object(r.a)(a,["bsPrefix","show","closeLabel","className","children","variant","onClose","dismissible","transition"]),x=Object(b.a)(s,"alert"),y=Object(d.a)((function(e){p&&p(!1,e)})),T=!0===w?f:w,k=l.a.createElement("div",Object(i.a)({role:"alert"},T?O:void 0,{ref:t,className:o()(j,x,u&&x+"-"+u,g&&x+"-dismissible")}),g&&l.a.createElement(v,{onClick:y,label:c}),m);return T?l.a.createElement(T,Object(i.a)({unmountOnExit:!0},O,{ref:void 0,in:n}),k):n?k:null}));B.displayName="Alert",B.defaultProps=L,B.Link=A,B.Heading=C;t.a=B},88:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return o}));var s=a(3),i=(a(67),a(77)),r=(a(0),"Fundamentals of 3D Web Visualizations with Three.js"),n="Feb 3 2021";"\npip install some-package\n".trim();function o(){return Object(s.jsxs)("div",{children:[Object(s.jsx)("h3",{children:r}),Object(s.jsx)("p",{className:"dateText",children:n}),Object(s.jsx)("p",{children:"Three.js is a powerful library for developing 3D web visualizations. Let's take a look at the fundaments of using the library to get an understanding of how we can start building web visualizations today."}),Object(s.jsx)(i.a,{variant:"info",children:"If you're using a web framework like React, you'd want to npm install three and import things from the three module. Instead, I'm using the regular old version that adds everything to a global variable called THREE, which is why you'll see a big THREE prefix in the JavaScript code."}),Object(s.jsx)("h4",{children:"What are we going to build?"}),Object(s.jsx)("p",{style:{marginBottom:0},children:"Here's a JSFiddle with the project we'll be building. It's a rotating sphere comprised of dots with a background of stars. Click on the Result tab to see the final result."}),Object(s.jsx)("iframe",{width:"100%",height:"600",src:"//jsfiddle.net/Bryce93/Lzcpqsf1/143/embedded/",allowfullscreen:"allowfullscreen",allowpaymentrequest:!0,frameborder:"0"}),Object(s.jsx)("p",{children:"To give credit where credit is due, motivation for this post and the approach to dot generation for the sphere comes from GitHub and Stripe. Check out These blog posts for more information."}),Object(s.jsxs)("ul",{children:[Object(s.jsx)("li",{children:Object(s.jsx)("a",{href:"https://stripe.com/blog/globe",children:"https://stripe.com/blog/globe"})}),Object(s.jsx)("li",{children:Object(s.jsx)("a",{href:"https://github.blog/2020-12-21-how-we-built-the-github-globe/",children:"https://github.blog/2020-12-21-how-we-built-the-github-globe/"})})]}),Object(s.jsx)("p",{children:"Below, we'll go over the fundamentals of Three.js visualizations. I encourage you to reference the example to see how these concepts are implemented in practice."}),Object(s.jsx)("h4",{children:"The Basic Framework"}),Object(s.jsx)("p",{children:"Every Three.js scenario includes a couple of things:"}),Object(s.jsxs)("ul",{children:[Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"A scene."})," Scenes allow you to set up what and where is to be rendered by three.js. This is where you place objects, lights and cameras. (",Object(s.jsx)("a",{href:"https://threejs.org/docs/#api/en/scenes/Scene",children:"documentation"}),")"]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"A camera"})," The most common type is a perspective camera. There are a couple of parameters to know, such as fov, near, and far. (",Object(s.jsx)("a",{href:"https://threejs.org/docs/#api/en/cameras/PerspectiveCamera",children:"documentation"}),") (",Object(s.jsx)("a",{href:"https://threejsfundamentals.org/threejs/lessons/threejs-cameras.html",children:"examples"}),")"]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"A renderer."})," This is what displays your scene using WebGL. Antialias and logarithmic depth buffer attributes can be set here. Antialias makes your application less jagged, but at a performance cost. Using a logarithmic depth buffer is great for space visualiztions where there's a large scale at play. (",Object(s.jsx)("a",{href:"https://threejs.org/docs/#api/en/renderers/WebGLRenderer",children:"documentation"}),")"]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"A render loop."})," This is the function that gets called between each frame. In our example, we called this function animate. The requestAnimationframe function ensures it gets called again on subsequent renders, and the render function is what actually performs the drawing. You can add additional logic here for moving things around, like the camera or the globe."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"A resize function."})," This isn't strictly required, but it's nice to have in most cases. If your viewport changes, Three.js won't automatically know to change the scene. You'll want a resize function to tell Three.js to change the renderer size and camera aspect when this occurs."]})]}),Object(s.jsx)("h4",{children:"Adding Objects"}),Object(s.jsx)("p",{children:"Every object we add to our Three.js scene includes a couple of things:"}),Object(s.jsxs)("ul",{children:[Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"A geometry."})," There's a geometry for just about every shape. This is what describes the wireframe, or general shape and size of your object. Here's the documentation for the BoxGeometry for reference: ",Object(s.jsx)("a",{href:"https://threejs.org/docs/#api/en/geometries/BoxGeometry",children:"https://threejs.org/docs/#api/en/geometries/BoxGeometry"}),"."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"A material."})," If the geometry is the poles to the tent, then this is the tarp. The material describes the appearance of objects. This includes color, how light affects it, and more. Here's the documentation for the MeshBasicMaterial for reference: ",Object(s.jsx)("a",{href:"https://threejs.org/docs/#api/en/materials/MeshBasicMaterial",children:"https://threejs.org/docs/#api/en/materials/MeshBasicMaterial"}),"."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("b",{children:"A mesh."})," This is what ties it all together. A mesh includes a geometry and a material. This is what you add to your scene. You can also add a mesh to other meshes, and it will automatically reflect the position and rotation of that parent object."]})]}),Object(s.jsx)("h4",{children:"Tying it all together"}),Object(s.jsx)("p",{children:"In our example, we have one sphere and two point cloud objects. We manage animation by either modifying objects within our render loop, or using the tween.js library to modify these values for us. We can modify anything, including position, rotation, color, scale, and more. In this example, we modify the globe scale with a TWEEN animation when we first load the application, and we modify the globe and star rotation while animating the scene."}),Object(s.jsxs)("p",{children:["You may have noticed that we don't have any lights in this example. How lights affect an object depend on that object's material. The MeshBasicMaterial and PointsMaterial aren't impacted by lighting, so we didn't need it in this example. If you're interested in lighting, try changing the sphere to a MeshPhongMaterial and adding some lights. Some good lights to try are the ",Object(s.jsx)("a",{href:"https://threejs.org/docs/#api/en/lights/AmbientLight",children:"AmbientLight"})," and the ",Object(s.jsx)("a",{href:"https://threejs.org/docs/#api/en/lights/DirectionalLight",children:"DirectionalLight"}),". Note that with the directional light, we'll want to change it's position with something like ",Object(s.jsx)("code",{children:"myDirectionalLight.position.set(x, y, z)"}),"."]}),Object(s.jsx)("h4",{children:"Next Steps"}),Object(s.jsxs)("ul",{children:[Object(s.jsxs)("li",{children:["Check out ",Object(s.jsx)("a",{href:"https://threejs.org/",children:"https://threejs.org/"}),". It has tons of examples and fantastic documentation."]}),Object(s.jsx)("li",{children:"Lighting, more geometries, more meshes, and camera controllers."}),Object(s.jsx)("li",{children:Object(s.jsx)("a",{href:"https://discoverthreejs.com/tips-and-tricks/",children:"The Big List of three.js Tips and Tricks!"})})]})]})}}}]);
//# sourceMappingURL=8.28fb22f0.chunk.js.map