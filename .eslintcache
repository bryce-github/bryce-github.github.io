[{"C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\App.js":"1","C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\reportWebVitals.js":"2","C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\index.js":"3","C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\blog\\Blog.js":"4","C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\blog\\posts\\python-venv\\Post.js":"5","C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\blog\\posts\\python-import\\Post.js":"6","C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\home\\Home.js":"7","C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\about\\About.js":"8"},{"size":1668,"mtime":1607803649293,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1607736813402,"results":"11","hashOfConfig":"10"},{"size":501,"mtime":1607743921616,"results":"12","hashOfConfig":"10"},{"size":2942,"mtime":1607800124228,"results":"13","hashOfConfig":"10"},{"size":8545,"mtime":1607796852899,"results":"14","hashOfConfig":"10"},{"size":609,"mtime":1607770096774,"results":"15","hashOfConfig":"10"},{"size":793,"mtime":1607803462906,"results":"16","hashOfConfig":"10"},{"size":3041,"mtime":1607812436882,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mhab60",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\App.js",[],"C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\reportWebVitals.js",[],"C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\index.js",[],["37","38"],"C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\blog\\Blog.js",["39"],"import React, { Suspense } from 'react';\r\nimport { Container, Row, Col, Card, Badge } from 'react-bootstrap';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\nimport \"./Blog.scss\";\r\n\r\nconst posts = {\r\n  'python-venv': {\r\n    name: \"Python Virtual Environments\",\r\n    date: \"Dec 11 2020\",\r\n    tags: [\"python\"],\r\n    description: \r\n      `Python virtual environments are a great way to manage and share dependencies \r\n      for a project. But what are they exactly, and how do they work? In this post, we'll \r\n      take a practical look at virtual environments and give you the understanding you need \r\n      to start using them today.`,\r\n    article: React.lazy(() => import('./posts/python-venv/Post'))\r\n  },\r\n  // 'python-import': {\r\n  //   name: \"How Python Imports Packages\",\r\n  //   date: \"Dec 12 2020\",\r\n  //   tags: [\"python\"],\r\n  //   description: \r\n  //     `Understanding the import system in Python can be confusing at times, especially\r\n  //     when you're running into unexpected import errors. In this post, we'll take a \r\n  //     look into how the import system works and discuss different ways you might\r\n  //     want to import some Python code.`,\r\n  //   article: React.lazy(() => import('./posts/python-import/Post'))\r\n  // },\r\n};\r\n\r\nexport default function Blog() {\r\n  let match = useRouteMatch();\r\n\r\n  return (\r\n    <Container>\r\n      <Switch>\r\n        <Route path={`${match.path}/:postId`}>\r\n          <Suspense fallback={<div>Loading...</div>}>\r\n            <FetchPost/>\r\n          </Suspense>\r\n        </Route> \r\n        <Route path={match.path}>\r\n          <Row>\r\n            <Col>\r\n              <h3>Posts</h3>\r\n            </Col>\r\n          </Row>\r\n          {Object.keys(posts).map((key) => {\r\n            return (\r\n              <Row key={key} className='mb-3'>\r\n                <Col>\r\n                  <Card>\r\n                    <Card.Body>\r\n                      <Link to={`${match.url}/${key}`}>\r\n                        <Card.Title>\r\n                          {posts[key].name}\r\n                        </Card.Title>\r\n                      </Link>\r\n                      <Card.Subtitle>\r\n                        {posts[key].date}\r\n                      </Card.Subtitle>\r\n                      <Card.Text>\r\n                        {posts[key].description}\r\n                      </Card.Text>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                      {posts[key].tags.map((tag) => {\r\n                        return <small key={tag} className=\"text-muted\">#{tag}</small>\r\n                      })}\r\n                    </Card.Footer>\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            )\r\n          })}\r\n        </Route>\r\n      </Switch>\r\n    </Container>\r\n  );\r\n}\r\n\r\nfunction FetchPost() {\r\n  const { postId } = useParams();\r\n  const Post = posts[postId].article;\r\n  return <Post />\r\n}\r\n","C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\blog\\posts\\python-venv\\Post.js",["40","41"],"import '../Post.scss';\r\nimport Python from './python.png'\r\nimport PythonPackage from './PythonPackage.png'\r\nimport { Image, Alert, Row, Col } from 'react-bootstrap';\r\n\r\nconst info = {\r\n  name: \"Python Virtual Environments\",\r\n  date: \"Dec 11 2020\",\r\n  tags: [\"python\"]\r\n};\r\n\r\nexport default function Post() {\r\n  return (\r\n    <div>\r\n      <h3>{info.name}</h3>\r\n      <p className=\"dateText\">{info.date}</p> \r\n      <p>\r\n        Python virtual environments are a great way to manage and share dependencies\r\n        for a project. But what are they exactly, and how do they work? In this post, we'll\r\n        take a practical look at virtual environments and give you the understanding you need\r\n        to start using them today.\r\n      </p>\r\n      <Alert variant=\"info\">\r\n        This post assumes you're using Python >3.6. Previous versions of Python do not\r\n        include the <code>venv</code> command. If you're using a different version, I \r\n        would suggest taking a look at the <code>virtualenv</code> package.\r\n      </Alert>\r\n      <h4>What are Virtual Environments?</h4>\r\n      <p>\r\n        Let's start with taking a look at how Python works on its own. When you first\r\n        install Python, it looks a bit like this.\r\n      </p>\r\n      <Image fluid src={Python} alt=\"Python\" className=\"mx-auto d-block\" />\r\n      <p>\r\n        Two scripts inside are <code>python.exe</code> and <code>pip.exe</code>.\r\n        These are called when you type <code>python</code> and <code>pip</code> in the\r\n        terminal. Now let's say you're working on a project that needs some package. \r\n        Let's install that package into our Python environment using <code>pip \r\n        install some-package</code>. Now our environment looks like this.\r\n      </p>\r\n      <Image fluid src={PythonPackage} alt=\"Python Package\" className=\"mx-auto d-block\" />\r\n      <p>\r\n        Great! Now we can import that package in our Python code. Now let's consider \r\n        two situations:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          You're working on a different project that requires a different version of\r\n          some-package.\r\n        </li>\r\n        <li>\r\n          Someone else joins the project, and they need to download some-package as well.\r\n          It's possible the package version has changed since you downloaded it. Anyone\r\n          who runs <code>pip install some-package</code> will install the latest version.\r\n          If you're using different versions, that may lead to issues running the code.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        This is where virtual environments come into play. In a nutshell, they copy that\r\n        entire Python environment into your project's folder. This new environment has\r\n        its own <code>python.exe</code> and <code>pip.exe</code>, and it has its own \r\n        set of packages that are unique to this environment!\r\n      </p>\r\n      <h4>Let's Give it a Try!</h4>\r\n      <p>\r\n        Now that we've covered the basics, let's take a look at virtual environments \r\n        to see how they work. We'll start in an empty directory, set up a virtual\r\n        environment, and install the requests package into it. Here's what our empty\r\n        directory looks like so far.\r\n      </p>\r\n      <pre className=\"bg-light\"><code>\r\n        /my-app\r\n      </code></pre>\r\n      <p>\r\n        Just an empty folder. Let's set up a virtual environment here to see what \r\n        happens. To do so, we'll type the command <code>python -m venv \r\n        .venv</code> into our terminal. This command instructs Python to create a\r\n        new virtual environment and place it into a folder named <code>.venv</code>.\r\n        Now let's see how this directory changes.\r\n      </p>\r\n      <pre className=\"bg-light\"><code>\r\n        /my-app\r\n        <br/>└─ .venv\r\n        <br/>   ├─ Include\r\n        <br/>   ├─ Scripts\r\n        <br/>   │  ├─ activate\r\n        <br/>   │  ├─ python.exe\r\n        <br/>   │  └─ pip.exe\r\n        <br/>   └─ Lib\r\n        <br/>      └─ site-packages\r\n      </code></pre>\r\n      <p>\r\n        You'll notice a couple more files in there, but these are the important\r\n        ones. After creating a virtual environment, the next step is to activate\r\n        it. You'll have to do this each time you work on the project. This step\r\n        is what tells your computer to use this virtual envinroment instead of \r\n        the regular old Python on your machine. The command to activate the\r\n        virtual envinroment is <code>./.venv/Scripts/activate</code>. After \r\n        running it, you should see the text <code>(.venv)</code> to the left\r\n        of your terminal line. This means the virtual envinroment is active.\r\n        To deactivate the virtual environment, just type <code>deactivate</code>.\r\n      </p>\r\n      <Alert variant=\"info\">\r\n        If you're working on Linux, the command will \r\n        be <code>source ./.venv/bin/activate</code>.\r\n      </Alert>\r\n      <p>\r\n        Now that our virtual environment is active, let's see what happens when we\r\n        run some Python code. Run the following Python lines of code and see what\r\n        comes up.\r\n      </p>\r\n      <pre><code>\r\n        >>> import sys\r\n        <br/>>>> print(sys.executable)\r\n        <br/>>>> quit()\r\n      </code></pre>\r\n      <p>\r\n        You should see it print out the <code>python.exe</code> that's in your\r\n        virtual environment. Next, let's install a package and see what happens\r\n        there. We'll call <code>pip install requests</code> while our virtual\r\n        environment is active. We should now see our folder update.\r\n      </p>\r\n      <pre className=\"bg-light\"><code>\r\n        /my-app\r\n        <br/>└─ .venv\r\n        <br/>   ├─ Include\r\n        <br/>   ├─ Scripts\r\n        <br/>   │  ├─ activate\r\n        <br/>   │  ├─ python.exe\r\n        <br/>   │  └─ pip.exe\r\n        <br/>   └─ Lib\r\n        <br/>      └─ site-packages\r\n        <br/>         └─ requests\r\n      </code></pre>\r\n      <p>\r\n        There will be some other dependencies that also install. We should now\r\n        see them and our requests folder in the <code>site-packages</code>. To\r\n        try it out, open <code>python</code> and try running \r\n        <code>import requests</code>. We can also run <code>deactivate</code> and\r\n        then try importing it, which should give us an <code>ImportError</code>. \r\n        This is because the packages in our virtual environment are mutually\r\n        exclusive from the packages in our regular old Python. Neat!\r\n      </p>\r\n      <h4>Saving and Sharing Dependencies</h4>\r\n      <p>\r\n        If you're working with repositories, it's good practice to add \r\n        your <code>.venv</code> folder to your <code>.gitignore</code>, since adding\r\n        all those dependencies can bog down your repository. Instead, it's best\r\n        practice to generate a \"requirements\" file and put that into your repository.\r\n        These requrements files can be generated by running <code>pip \r\n        freeze > requirements.txt</code> when your virtual environment is active. \r\n        This should create a new <code>requirements.txt</code> file with the following text.\r\n      </p>\r\n      <pre className=\"bg-light\"><code>\r\n        <br/>certifi==2020.12.5\r\n        <br/>chardet==3.0.4\r\n        <br/>idna==2.10\r\n        <br/>requests==2.25.0\r\n        <br/>urllib3==1.26.2\r\n      </code></pre>\r\n      <p>\r\n        This is a list of all the packages and their version numbers that you've \r\n        installed onto your virtual environment. Note the versions you see might\r\n        be different than these because they might have been updated since I wrote\r\n        this blog. Now, if someone else were to set up a virtual environment, they \r\n        can install all these same dependencies by running <code>pip install -r \r\n        requirements.txt</code>. And voila! They have all the same dependencies,\r\n        and they'll be the same version as what you're using.\r\n      </p>\r\n      <h4>In Conclusion</h4>\r\n      <p>\r\n        Python virtual environments are a great way to keep your Python projects\r\n        organized. It's a good practice to set up a virtual environment for each\r\n        of your projects so they're self-contained and easily shared with others.\r\n        I hope this post gave you an understanding of what virtual environments\r\n        are, how you use them and how they can benefit you. Now get out there and\r\n        have fun coding!\r\n      </p>\r\n    </div>\r\n  )\r\n}","C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\blog\\posts\\python-import\\Post.js",[],"C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\home\\Home.js",[],"C:\\Users\\bryce\\Documents\\projects\\bryceanglin.github.io\\src\\about\\About.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":2,"column":37,"nodeType":"48","messageId":"49","endLine":2,"endColumn":42},{"ruleId":"46","severity":1,"message":"50","line":4,"column":24,"nodeType":"48","messageId":"49","endLine":4,"endColumn":27},{"ruleId":"46","severity":1,"message":"51","line":4,"column":29,"nodeType":"48","messageId":"49","endLine":4,"endColumn":32},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'Badge' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","no-global-assign","no-unsafe-negation"]